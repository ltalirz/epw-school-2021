                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
  S. Ponce, E. R. Margine, C. Verdi, and F. Giustino,                                 
                                                Comput. Phys. Commun. 209, 116 (2016) 
                                                                                      

     Program EPW v.5.3.1 starts on 15Jun2021 at 20: 4: 8 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI & OpenMP), running on       4 processor cores
     Number of MPI processes:                 4
     Threads/MPI process:                     1

     MPI processes distributed on     1 nodes
     K-points division:     npool     =       4
     Reading input from pb.epw1.in

     No temperature supplied. Setting temps(:) to 300 K.

     Reading xml data from directory:

     ./pb.save/

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PZ
                           (   1   1   0   0   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want


     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         349     349    121                 4285     4285     941

     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =       9.2226  a.u.
     unit-cell volume          =     196.1075 (a.u.)^3
     number of atoms/cell      =            1
     number of atomic types    =            1
     kinetic-energy cut-off    =      30.0000  Ry
     charge density cut-off    =     120.0000  Ry
     Exchange-correlation= PZ
                           (   1   1   0   0   0   0   0)


     celldm(1)=    9.22256  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1        Pb 207.2000   tau( 1) = (    0.00000    0.00000    0.00000  )

     49 Sym.Ops. (with q -> -q+G )


     G cutoff =  258.5380  (   4285 G-vectors)     FFT grid: ( 24, 24, 24)
     number of k points=  216  gaussian broad. (Ry)=  0.0500     ngauss =  -1
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0092593
        k(    2) = (  -0.1666667   0.1666667  -0.1666667), wk =   0.0092593
        k(    3) = (  -0.3333333   0.3333333  -0.3333333), wk =   0.0092593
        k(    4) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0092593
        k(    5) = (  -0.6666667   0.6666667  -0.6666667), wk =   0.0092593
        k(    6) = (  -0.8333333   0.8333333  -0.8333333), wk =   0.0092593
        k(    7) = (   0.1666667   0.1666667   0.1666667), wk =   0.0092593
        k(    8) = (   0.0000000   0.3333333   0.0000000), wk =   0.0092593
        k(    9) = (  -0.1666667   0.5000000  -0.1666667), wk =   0.0092593
        k(   10) = (  -0.3333333   0.6666667  -0.3333333), wk =   0.0092593
        k(   11) = (  -0.5000000   0.8333333  -0.5000000), wk =   0.0092593
        k(   12) = (  -0.6666667   1.0000000  -0.6666667), wk =   0.0092593
        k(   13) = (   0.3333333   0.3333333   0.3333333), wk =   0.0092593
        k(   14) = (   0.1666667   0.5000000   0.1666667), wk =   0.0092593
        k(   15) = (   0.0000000   0.6666667   0.0000000), wk =   0.0092593
        k(   16) = (  -0.1666667   0.8333333  -0.1666667), wk =   0.0092593
        k(   17) = (  -0.3333333   1.0000000  -0.3333333), wk =   0.0092593
        k(   18) = (  -0.5000000   1.1666667  -0.5000000), wk =   0.0092593
        k(   19) = (   0.5000000   0.5000000   0.5000000), wk =   0.0092593
        k(   20) = (   0.3333333   0.6666667   0.3333333), wk =   0.0092593
        k(   21) = (   0.1666667   0.8333333   0.1666667), wk =   0.0092593
        k(   22) = (   0.0000000   1.0000000   0.0000000), wk =   0.0092593
        k(   23) = (  -0.1666667   1.1666667  -0.1666667), wk =   0.0092593
        k(   24) = (  -0.3333333   1.3333333  -0.3333333), wk =   0.0092593
        k(   25) = (   0.6666667   0.6666667   0.6666667), wk =   0.0092593
        k(   26) = (   0.5000000   0.8333333   0.5000000), wk =   0.0092593
        k(   27) = (   0.3333333   1.0000000   0.3333333), wk =   0.0092593
        k(   28) = (   0.1666667   1.1666667   0.1666667), wk =   0.0092593
        k(   29) = (   0.0000000   1.3333333   0.0000000), wk =   0.0092593
        k(   30) = (  -0.1666667   1.5000000  -0.1666667), wk =   0.0092593
        k(   31) = (   0.8333333   0.8333333   0.8333333), wk =   0.0092593
        k(   32) = (   0.6666667   1.0000000   0.6666667), wk =   0.0092593
        k(   33) = (   0.5000000   1.1666667   0.5000000), wk =   0.0092593
        k(   34) = (   0.3333333   1.3333333   0.3333333), wk =   0.0092593
        k(   35) = (   0.1666667   1.5000000   0.1666667), wk =   0.0092593
        k(   36) = (   0.0000000   1.6666667   0.0000000), wk =   0.0092593
        k(   37) = (  -0.1666667  -0.1666667   0.1666667), wk =   0.0092593
        k(   38) = (  -0.3333333   0.0000000   0.0000000), wk =   0.0092593
        k(   39) = (  -0.5000000   0.1666667  -0.1666667), wk =   0.0092593
        k(   40) = (  -0.6666667   0.3333333  -0.3333333), wk =   0.0092593
        k(   41) = (  -0.8333333   0.5000000  -0.5000000), wk =   0.0092593
        k(   42) = (  -1.0000000   0.6666667  -0.6666667), wk =   0.0092593
        k(   43) = (   0.0000000   0.0000000   0.3333333), wk =   0.0092593
        k(   44) = (  -0.1666667   0.1666667   0.1666667), wk =   0.0092593
        k(   45) = (  -0.3333333   0.3333333   0.0000000), wk =   0.0092593
        k(   46) = (  -0.5000000   0.5000000  -0.1666667), wk =   0.0092593
        k(   47) = (  -0.6666667   0.6666667  -0.3333333), wk =   0.0092593
        k(   48) = (  -0.8333333   0.8333333  -0.5000000), wk =   0.0092593
        k(   49) = (   0.1666667   0.1666667   0.5000000), wk =   0.0092593
        k(   50) = (  -0.0000000   0.3333333   0.3333333), wk =   0.0092593
        k(   51) = (  -0.1666667   0.5000000   0.1666667), wk =   0.0092593
        k(   52) = (  -0.3333333   0.6666667   0.0000000), wk =   0.0092593
        k(   53) = (  -0.5000000   0.8333333  -0.1666667), wk =   0.0092593
        k(   54) = (  -0.6666667   1.0000000  -0.3333333), wk =   0.0092593
        k(   55) = (   0.3333333   0.3333333   0.6666667), wk =   0.0092593
        k(   56) = (   0.1666667   0.5000000   0.5000000), wk =   0.0092593
        k(   57) = (   0.0000000   0.6666667   0.3333333), wk =   0.0092593
        k(   58) = (  -0.1666667   0.8333333   0.1666667), wk =   0.0092593
        k(   59) = (  -0.3333333   1.0000000   0.0000000), wk =   0.0092593
        k(   60) = (  -0.5000000   1.1666667  -0.1666667), wk =   0.0092593
        k(   61) = (   0.5000000   0.5000000   0.8333333), wk =   0.0092593
        k(   62) = (   0.3333333   0.6666667   0.6666667), wk =   0.0092593
        k(   63) = (   0.1666667   0.8333333   0.5000000), wk =   0.0092593
        k(   64) = (   0.0000000   1.0000000   0.3333333), wk =   0.0092593
        k(   65) = (  -0.1666667   1.1666667   0.1666667), wk =   0.0092593
        k(   66) = (  -0.3333333   1.3333333   0.0000000), wk =   0.0092593
        k(   67) = (   0.6666667   0.6666667   1.0000000), wk =   0.0092593
        k(   68) = (   0.5000000   0.8333333   0.8333333), wk =   0.0092593
        k(   69) = (   0.3333333   1.0000000   0.6666667), wk =   0.0092593
        k(   70) = (   0.1666667   1.1666667   0.5000000), wk =   0.0092593
        k(   71) = (  -0.0000000   1.3333333   0.3333333), wk =   0.0092593
        k(   72) = (  -0.1666667   1.5000000   0.1666667), wk =   0.0092593
        k(   73) = (  -0.3333333  -0.3333333   0.3333333), wk =   0.0092593
        k(   74) = (  -0.5000000  -0.1666667   0.1666667), wk =   0.0092593
        k(   75) = (  -0.6666667   0.0000000   0.0000000), wk =   0.0092593
        k(   76) = (  -0.8333333   0.1666667  -0.1666667), wk =   0.0092593
        k(   77) = (  -1.0000000   0.3333333  -0.3333333), wk =   0.0092593
        k(   78) = (  -1.1666667   0.5000000  -0.5000000), wk =   0.0092593
        k(   79) = (  -0.1666667  -0.1666667   0.5000000), wk =   0.0092593
        k(   80) = (  -0.3333333   0.0000000   0.3333333), wk =   0.0092593
        k(   81) = (  -0.5000000   0.1666667   0.1666667), wk =   0.0092593
        k(   82) = (  -0.6666667   0.3333333   0.0000000), wk =   0.0092593
        k(   83) = (  -0.8333333   0.5000000  -0.1666667), wk =   0.0092593
        k(   84) = (  -1.0000000   0.6666667  -0.3333333), wk =   0.0092593
        k(   85) = (   0.0000000   0.0000000   0.6666667), wk =   0.0092593
        k(   86) = (  -0.1666667   0.1666667   0.5000000), wk =   0.0092593
        k(   87) = (  -0.3333333   0.3333333   0.3333333), wk =   0.0092593
        k(   88) = (  -0.5000000   0.5000000   0.1666667), wk =   0.0092593
        k(   89) = (  -0.6666667   0.6666667  -0.0000000), wk =   0.0092593
        k(   90) = (  -0.8333333   0.8333333  -0.1666667), wk =   0.0092593
        k(   91) = (   0.1666667   0.1666667   0.8333333), wk =   0.0092593
        k(   92) = (   0.0000000   0.3333333   0.6666667), wk =   0.0092593
        k(   93) = (  -0.1666667   0.5000000   0.5000000), wk =   0.0092593
        k(   94) = (  -0.3333333   0.6666667   0.3333333), wk =   0.0092593
        k(   95) = (  -0.5000000   0.8333333   0.1666667), wk =   0.0092593
        k(   96) = (  -0.6666667   1.0000000   0.0000000), wk =   0.0092593
        k(   97) = (   0.3333333   0.3333333   1.0000000), wk =   0.0092593
        k(   98) = (   0.1666667   0.5000000   0.8333333), wk =   0.0092593
        k(   99) = (   0.0000000   0.6666667   0.6666667), wk =   0.0092593
        k(  100) = (  -0.1666667   0.8333333   0.5000000), wk =   0.0092593
        k(  101) = (  -0.3333333   1.0000000   0.3333333), wk =   0.0092593
        k(  102) = (  -0.5000000   1.1666667   0.1666667), wk =   0.0092593
        k(  103) = (   0.5000000   0.5000000   1.1666667), wk =   0.0092593
        k(  104) = (   0.3333333   0.6666667   1.0000000), wk =   0.0092593
        k(  105) = (   0.1666667   0.8333333   0.8333333), wk =   0.0092593
        k(  106) = (   0.0000000   1.0000000   0.6666667), wk =   0.0092593
        k(  107) = (  -0.1666667   1.1666667   0.5000000), wk =   0.0092593
        k(  108) = (  -0.3333333   1.3333333   0.3333333), wk =   0.0092593
        k(  109) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0092593
        k(  110) = (  -0.6666667  -0.3333333   0.3333333), wk =   0.0092593
        k(  111) = (  -0.8333333  -0.1666667   0.1666667), wk =   0.0092593
        k(  112) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0092593
        k(  113) = (  -1.1666667   0.1666667  -0.1666667), wk =   0.0092593
        k(  114) = (  -1.3333333   0.3333333  -0.3333333), wk =   0.0092593
        k(  115) = (  -0.3333333  -0.3333333   0.6666667), wk =   0.0092593
        k(  116) = (  -0.5000000  -0.1666667   0.5000000), wk =   0.0092593
        k(  117) = (  -0.6666667   0.0000000   0.3333333), wk =   0.0092593
        k(  118) = (  -0.8333333   0.1666667   0.1666667), wk =   0.0092593
        k(  119) = (  -1.0000000   0.3333333   0.0000000), wk =   0.0092593
        k(  120) = (  -1.1666667   0.5000000  -0.1666667), wk =   0.0092593
        k(  121) = (  -0.1666667  -0.1666667   0.8333333), wk =   0.0092593
        k(  122) = (  -0.3333333  -0.0000000   0.6666667), wk =   0.0092593
        k(  123) = (  -0.5000000   0.1666667   0.5000000), wk =   0.0092593
        k(  124) = (  -0.6666667   0.3333333   0.3333333), wk =   0.0092593
        k(  125) = (  -0.8333333   0.5000000   0.1666667), wk =   0.0092593
        k(  126) = (  -1.0000000   0.6666667   0.0000000), wk =   0.0092593
        k(  127) = (   0.0000000   0.0000000   1.0000000), wk =   0.0092593
        k(  128) = (  -0.1666667   0.1666667   0.8333333), wk =   0.0092593
        k(  129) = (  -0.3333333   0.3333333   0.6666667), wk =   0.0092593
        k(  130) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0092593
        k(  131) = (  -0.6666667   0.6666667   0.3333333), wk =   0.0092593
        k(  132) = (  -0.8333333   0.8333333   0.1666667), wk =   0.0092593
        k(  133) = (   0.1666667   0.1666667   1.1666667), wk =   0.0092593
        k(  134) = (   0.0000000   0.3333333   1.0000000), wk =   0.0092593
        k(  135) = (  -0.1666667   0.5000000   0.8333333), wk =   0.0092593
        k(  136) = (  -0.3333333   0.6666667   0.6666667), wk =   0.0092593
        k(  137) = (  -0.5000000   0.8333333   0.5000000), wk =   0.0092593
        k(  138) = (  -0.6666667   1.0000000   0.3333333), wk =   0.0092593
        k(  139) = (   0.3333333   0.3333333   1.3333333), wk =   0.0092593
        k(  140) = (   0.1666667   0.5000000   1.1666667), wk =   0.0092593
        k(  141) = (   0.0000000   0.6666667   1.0000000), wk =   0.0092593
        k(  142) = (  -0.1666667   0.8333333   0.8333333), wk =   0.0092593
        k(  143) = (  -0.3333333   1.0000000   0.6666667), wk =   0.0092593
        k(  144) = (  -0.5000000   1.1666667   0.5000000), wk =   0.0092593
        k(  145) = (  -0.6666667  -0.6666667   0.6666667), wk =   0.0092593
        k(  146) = (  -0.8333333  -0.5000000   0.5000000), wk =   0.0092593
        k(  147) = (  -1.0000000  -0.3333333   0.3333333), wk =   0.0092593
        k(  148) = (  -1.1666667  -0.1666667   0.1666667), wk =   0.0092593
        k(  149) = (  -1.3333333   0.0000000   0.0000000), wk =   0.0092593
        k(  150) = (  -1.5000000   0.1666667  -0.1666667), wk =   0.0092593
        k(  151) = (  -0.5000000  -0.5000000   0.8333333), wk =   0.0092593
        k(  152) = (  -0.6666667  -0.3333333   0.6666667), wk =   0.0092593
        k(  153) = (  -0.8333333  -0.1666667   0.5000000), wk =   0.0092593
        k(  154) = (  -1.0000000   0.0000000   0.3333333), wk =   0.0092593
        k(  155) = (  -1.1666667   0.1666667   0.1666667), wk =   0.0092593
        k(  156) = (  -1.3333333   0.3333333   0.0000000), wk =   0.0092593
        k(  157) = (  -0.3333333  -0.3333333   1.0000000), wk =   0.0092593
        k(  158) = (  -0.5000000  -0.1666667   0.8333333), wk =   0.0092593
        k(  159) = (  -0.6666667  -0.0000000   0.6666667), wk =   0.0092593
        k(  160) = (  -0.8333333   0.1666667   0.5000000), wk =   0.0092593
        k(  161) = (  -1.0000000   0.3333333   0.3333333), wk =   0.0092593
        k(  162) = (  -1.1666667   0.5000000   0.1666667), wk =   0.0092593
        k(  163) = (  -0.1666667  -0.1666667   1.1666667), wk =   0.0092593
        k(  164) = (  -0.3333333  -0.0000000   1.0000000), wk =   0.0092593
        k(  165) = (  -0.5000000   0.1666667   0.8333333), wk =   0.0092593
        k(  166) = (  -0.6666667   0.3333333   0.6666667), wk =   0.0092593
        k(  167) = (  -0.8333333   0.5000000   0.5000000), wk =   0.0092593
        k(  168) = (  -1.0000000   0.6666667   0.3333333), wk =   0.0092593
        k(  169) = (   0.0000000   0.0000000   1.3333333), wk =   0.0092593
        k(  170) = (  -0.1666667   0.1666667   1.1666667), wk =   0.0092593
        k(  171) = (  -0.3333333   0.3333333   1.0000000), wk =   0.0092593
        k(  172) = (  -0.5000000   0.5000000   0.8333333), wk =   0.0092593
        k(  173) = (  -0.6666667   0.6666667   0.6666667), wk =   0.0092593
        k(  174) = (  -0.8333333   0.8333333   0.5000000), wk =   0.0092593
        k(  175) = (   0.1666667   0.1666667   1.5000000), wk =   0.0092593
        k(  176) = (  -0.0000000   0.3333333   1.3333333), wk =   0.0092593
        k(  177) = (  -0.1666667   0.5000000   1.1666667), wk =   0.0092593
        k(  178) = (  -0.3333333   0.6666667   1.0000000), wk =   0.0092593
        k(  179) = (  -0.5000000   0.8333333   0.8333333), wk =   0.0092593
        k(  180) = (  -0.6666667   1.0000000   0.6666667), wk =   0.0092593
        k(  181) = (  -0.8333333  -0.8333333   0.8333333), wk =   0.0092593
        k(  182) = (  -1.0000000  -0.6666667   0.6666667), wk =   0.0092593
        k(  183) = (  -1.1666667  -0.5000000   0.5000000), wk =   0.0092593
        k(  184) = (  -1.3333333  -0.3333333   0.3333333), wk =   0.0092593
        k(  185) = (  -1.5000000  -0.1666667   0.1666667), wk =   0.0092593
        k(  186) = (  -1.6666667   0.0000000   0.0000000), wk =   0.0092593
        k(  187) = (  -0.6666667  -0.6666667   1.0000000), wk =   0.0092593
        k(  188) = (  -0.8333333  -0.5000000   0.8333333), wk =   0.0092593
        k(  189) = (  -1.0000000  -0.3333333   0.6666667), wk =   0.0092593
        k(  190) = (  -1.1666667  -0.1666667   0.5000000), wk =   0.0092593
        k(  191) = (  -1.3333333   0.0000000   0.3333333), wk =   0.0092593
        k(  192) = (  -1.5000000   0.1666667   0.1666667), wk =   0.0092593
        k(  193) = (  -0.5000000  -0.5000000   1.1666667), wk =   0.0092593
        k(  194) = (  -0.6666667  -0.3333333   1.0000000), wk =   0.0092593
        k(  195) = (  -0.8333333  -0.1666667   0.8333333), wk =   0.0092593
        k(  196) = (  -1.0000000   0.0000000   0.6666667), wk =   0.0092593
        k(  197) = (  -1.1666667   0.1666667   0.5000000), wk =   0.0092593
        k(  198) = (  -1.3333333   0.3333333   0.3333333), wk =   0.0092593
        k(  199) = (  -0.3333333  -0.3333333   1.3333333), wk =   0.0092593
        k(  200) = (  -0.5000000  -0.1666667   1.1666667), wk =   0.0092593
        k(  201) = (  -0.6666667   0.0000000   1.0000000), wk =   0.0092593
        k(  202) = (  -0.8333333   0.1666667   0.8333333), wk =   0.0092593
        k(  203) = (  -1.0000000   0.3333333   0.6666667), wk =   0.0092593
        k(  204) = (  -1.1666667   0.5000000   0.5000000), wk =   0.0092593
        k(  205) = (  -0.1666667  -0.1666667   1.5000000), wk =   0.0092593
        k(  206) = (  -0.3333333   0.0000000   1.3333333), wk =   0.0092593
        k(  207) = (  -0.5000000   0.1666667   1.1666667), wk =   0.0092593
        k(  208) = (  -0.6666667   0.3333333   1.0000000), wk =   0.0092593
        k(  209) = (  -0.8333333   0.5000000   0.8333333), wk =   0.0092593
        k(  210) = (  -1.0000000   0.6666667   0.6666667), wk =   0.0092593
        k(  211) = (   0.0000000   0.0000000   1.6666667), wk =   0.0092593
        k(  212) = (  -0.1666667   0.1666667   1.5000000), wk =   0.0092593
        k(  213) = (  -0.3333333   0.3333333   1.3333333), wk =   0.0092593
        k(  214) = (  -0.5000000   0.5000000   1.1666667), wk =   0.0092593
        k(  215) = (  -0.6666667   0.6666667   1.0000000), wk =   0.0092593
        k(  216) = (  -0.8333333   0.8333333   0.8333333), wk =   0.0092593

     PseudoPot. # 1 for Pb read from file:
     ../pb_s.UPF
     MD5 check sum: 7774f596943a2055f0d8d19eea6f2ae8
     Pseudo is Norm-conserving, Zval = 14.0
     Generated using "atomic" code by A. Dal Corso  (Quantum ESPRESSO distribution)
     Using radial grid of 1281 points,  2 beta functions with: 
                l(1) =   2
                l(2) =   1
     EPW          :      0.40s CPU      0.44s WALL

     EPW          :      0.43s CPU      0.48s WALL

     -------------------------------------------------------------------
     Wannierization on  6 x  6 x  6 electronic grid
     -------------------------------------------------------------------

     Spin CASE ( default = unpolarized )

     Initializing Wannier90


     Initial Wannier projections

     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   1
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   2
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   3
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   4

      - Number of bands is (  5)
      - Number of total bands is ( 10)
      - Number of excluded bands is (  5)
      - Number of wannier functions is (  4)
      - All guiding functions are given 

  Reading data about k-point neighbours 

      - All neighbours are found 

     AMN
      k points =   216 in    4 pools
            1 of   54 on ionode
            2 of   54 on ionode
            3 of   54 on ionode
            4 of   54 on ionode
            5 of   54 on ionode
            6 of   54 on ionode
            7 of   54 on ionode
            8 of   54 on ionode
            9 of   54 on ionode
           10 of   54 on ionode
           11 of   54 on ionode
           12 of   54 on ionode
           13 of   54 on ionode
           14 of   54 on ionode
           15 of   54 on ionode
           16 of   54 on ionode
           17 of   54 on ionode
           18 of   54 on ionode
           19 of   54 on ionode
           20 of   54 on ionode
           21 of   54 on ionode
           22 of   54 on ionode
           23 of   54 on ionode
           24 of   54 on ionode
           25 of   54 on ionode
           26 of   54 on ionode
           27 of   54 on ionode
           28 of   54 on ionode
           29 of   54 on ionode
           30 of   54 on ionode
           31 of   54 on ionode
           32 of   54 on ionode
           33 of   54 on ionode
           34 of   54 on ionode
           35 of   54 on ionode
           36 of   54 on ionode
           37 of   54 on ionode
           38 of   54 on ionode
           39 of   54 on ionode
           40 of   54 on ionode
           41 of   54 on ionode
           42 of   54 on ionode
           43 of   54 on ionode
           44 of   54 on ionode
           45 of   54 on ionode
           46 of   54 on ionode
           47 of   54 on ionode
           48 of   54 on ionode
           49 of   54 on ionode
           50 of   54 on ionode
           51 of   54 on ionode
           52 of   54 on ionode
           53 of   54 on ionode
           54 of   54 on ionode

     AMN calculated

     MMN
      k points =   216 in    4 pools
            1 of   54 on ionode
            2 of   54 on ionode
            3 of   54 on ionode
            4 of   54 on ionode
            5 of   54 on ionode
            6 of   54 on ionode
            7 of   54 on ionode
            8 of   54 on ionode
            9 of   54 on ionode
           10 of   54 on ionode
           11 of   54 on ionode
           12 of   54 on ionode
           13 of   54 on ionode
           14 of   54 on ionode
           15 of   54 on ionode
           16 of   54 on ionode
           17 of   54 on ionode
           18 of   54 on ionode
           19 of   54 on ionode
           20 of   54 on ionode
           21 of   54 on ionode
           22 of   54 on ionode
           23 of   54 on ionode
           24 of   54 on ionode
           25 of   54 on ionode
           26 of   54 on ionode
           27 of   54 on ionode
           28 of   54 on ionode
           29 of   54 on ionode
           30 of   54 on ionode
           31 of   54 on ionode
           32 of   54 on ionode
           33 of   54 on ionode
           34 of   54 on ionode
           35 of   54 on ionode
           36 of   54 on ionode
           37 of   54 on ionode
           38 of   54 on ionode
           39 of   54 on ionode
           40 of   54 on ionode
           41 of   54 on ionode
           42 of   54 on ionode
           43 of   54 on ionode
           44 of   54 on ionode
           45 of   54 on ionode
           46 of   54 on ionode
           47 of   54 on ionode
           48 of   54 on ionode
           49 of   54 on ionode
           50 of   54 on ionode
           51 of   54 on ionode
           52 of   54 on ionode
           53 of   54 on ionode
           54 of   54 on ionode
     MMN calculated

     Running Wannier90

     Wannier Function centers (cartesian, alat) and spreads (ang):

     (   0.07779   0.07779   0.07779) :   2.22274
     (   0.07779  -0.07779  -0.07779) :   2.22274
     (  -0.07779   0.07779  -0.07779) :   2.22274
     (  -0.07779  -0.07779   0.07779) :   2.22274

    Writing out Wannier function cube files

nr1s =   24, nr2s =   24, nr3s =   24
write_plot: wannier_plot_supercell =    5    5    5
      Wannier Function Num:    1       Maximum Im/Re Ratio =    0.000001
      Wannier Function Num:    2       Maximum Im/Re Ratio =    0.000000
      Wannier Function Num:    3       Maximum Im/Re Ratio =    0.000001
      Wannier Function Num:    4       Maximum Im/Re Ratio =    0.000000


  cube files written
     -------------------------------------------------------------------
     WANNIER      :      4.44s CPU      4.71s WALL (       1 calls)
     -------------------------------------------------------------------

     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.02s CPU      0.02s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          48


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 48
          in addition sym. q -> -q+G:

     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix

        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q:  6

     Number of q in the star =    8
     List of q in the star:
          1  -0.333333333   0.333333333  -0.333333333
          2   0.333333333   0.333333333  -0.333333333
          3   0.333333333   0.333333333   0.333333333
          4  -0.333333333   0.333333333   0.333333333
          5   0.333333333  -0.333333333   0.333333333
          6  -0.333333333  -0.333333333  -0.333333333
          7   0.333333333  -0.333333333  -0.333333333
          8  -0.333333333  -0.333333333   0.333333333

        q(    2 ) = (  -0.3333333   0.3333333  -0.3333333 )
        q(    3 ) = (   0.3333333   0.3333333  -0.3333333 )
        q(    4 ) = (   0.3333333   0.3333333   0.3333333 )
        q(    5 ) = (  -0.3333333   0.3333333   0.3333333 )
        q(    6 ) = (   0.3333333  -0.3333333   0.3333333 )
        q(    7 ) = (  -0.3333333  -0.3333333  -0.3333333 )
        q(    8 ) = (   0.3333333  -0.3333333  -0.3333333 )
        q(    9 ) = (  -0.3333333  -0.3333333   0.3333333 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q:  8

     Number of q in the star =    6
     List of q in the star:
          1   0.000000000   0.666666667   0.000000000
          2  -0.666666667   0.000000000   0.000000000
          3   0.000000000  -0.666666667   0.000000000
          4   0.000000000   0.000000000   0.666666667
          5   0.000000000   0.000000000  -0.666666667
          6   0.666666667   0.000000000   0.000000000

        q(   10 ) = (   0.0000000   0.6666667   0.0000000 )
        q(   11 ) = (  -0.6666667   0.0000000   0.0000000 )
        q(   12 ) = (   0.0000000  -0.6666667   0.0000000 )
        q(   13 ) = (   0.0000000   0.0000000   0.6666667 )
        q(   14 ) = (   0.0000000   0.0000000  -0.6666667 )
        q(   15 ) = (   0.6666667   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    4
     ===================================================================

     Symmetries of small group of q:  4

     Number of q in the star =   12
     List of q in the star:
          1   0.666666667   0.000000000   0.666666667
          2   0.666666667   0.000000000  -0.666666667
          3  -0.666666667   0.000000000  -0.666666667
          4  -0.666666667   0.000000000   0.666666667
          5   0.000000000  -0.666666667   0.666666667
          6  -0.666666667   0.666666667   0.000000000
          7  -0.666666667  -0.666666667   0.000000000
          8   0.666666667   0.666666667   0.000000000
          9   0.666666667  -0.666666667   0.000000000
         10   0.000000000   0.666666667   0.666666667
         11   0.000000000   0.666666667  -0.666666667
         12   0.000000000  -0.666666667  -0.666666667

        q(   16 ) = (   0.6666667   0.0000000   0.6666667 )
        q(   17 ) = (   0.6666667   0.0000000  -0.6666667 )
        q(   18 ) = (  -0.6666667   0.0000000  -0.6666667 )
        q(   19 ) = (  -0.6666667  -0.0000000   0.6666667 )
        q(   20 ) = (   0.0000000  -0.6666667   0.6666667 )
        q(   21 ) = (  -0.6666667   0.6666667   0.0000000 )
        q(   22 ) = (  -0.6666667  -0.6666667   0.0000000 )
        q(   23 ) = (   0.6666667   0.6666667   0.0000000 )
        q(   24 ) = (   0.6666667  -0.6666667   0.0000000 )
        q(   25 ) = (   0.0000000   0.6666667   0.6666667 )
        q(   26 ) = (   0.0000000   0.6666667  -0.6666667 )
        q(   27 ) = (  -0.0000000  -0.6666667  -0.6666667 )

     Band disentanglement is used: nbndsub =    4
     Use zone-centred Wigner-Seitz cells 
     Number of WS vectors for electrons      279
     Number of WS vectors for phonons       43
     Number of WS vectors for electron-phonon       43
     Maximum number of cores for efficient parallelization      129
     Results may improve by using use_ws == .TRUE. 

     Velocity matrix elements calculated
 
 
     Bloch2wane:          1 /         27
     Bloch2wane:          2 /         27
     Bloch2wane:          3 /         27
     Bloch2wane:          4 /         27
     Bloch2wane:          5 /         27
     Bloch2wane:          6 /         27
     Bloch2wane:          7 /         27
     Bloch2wane:          8 /         27
     Bloch2wane:          9 /         27
     Bloch2wane:         10 /         27
     Bloch2wane:         11 /         27
     Bloch2wane:         12 /         27
     Bloch2wane:         13 /         27
     Bloch2wane:         14 /         27
     Bloch2wane:         15 /         27
     Bloch2wane:         16 /         27
     Bloch2wane:         17 /         27
     Bloch2wane:         18 /         27
     Bloch2wane:         19 /         27
     Bloch2wane:         20 /         27
     Bloch2wane:         21 /         27
     Bloch2wane:         22 /         27
     Bloch2wane:         23 /         27
     Bloch2wane:         24 /         27
     Bloch2wane:         25 /         27
     Bloch2wane:         26 /         27
     Bloch2wane:         27 /         27
 
     Bloch2wanp:          1 /         11
     Bloch2wanp:          2 /         11
     Bloch2wanp:          3 /         11
     Bloch2wanp:          4 /         11
     Bloch2wanp:          5 /         11
     Bloch2wanp:          6 /         11
     Bloch2wanp:          7 /         11
     Bloch2wanp:          8 /         11
     Bloch2wanp:          9 /         11
     Bloch2wanp:         10 /         11
     Bloch2wanp:         11 /         11

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

System file does not exist
     ===================================================================
     Memory usage:  VmHWM =         0Mb
                   VmPeak =         0Mb
     ===================================================================
     
     Using q-mesh file: path2.dat
     WARNING: q-point weigths do not add up to 1 [loadqmesh_serial]
     Size of q point mesh for interpolation:        181
     Using k-mesh file: path2.dat
     WARNING: k-point weigths do not add up to 1 [loadkmesh_para]
     Size of k point mesh for interpolation:        362
     Max number of k points per pool:               92

     Fermi energy coarse grid =  11.801776 eV

     ===================================================================

     Fermi energy corresponds to the coarse k-mesh

     ===================================================================

              ibndmin =     1  ebndmin =    -0.409 eV
              ibndmax =     4  ebndmax =    19.014 eV


     Number of ep-matrix elements per pool :         2208 ~=   17.25 Kb (@ 8 bytes/ DP)
     Number selected, total         100         100
     We only need to compute      181 q-points
      
     Progression iq (fine) =        100/       181
System file does not exist
     ===================================================================
     Memory usage:  VmHWM =         0Mb
                   VmPeak =         0Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     11.31s CPU     11.97s WALL (       1 calls)

     INITIALIZATION: 

     init_vloc    :      0.00s CPU      0.00s WALL (       1 calls)
     init_us_1    :      0.02s CPU      0.02s WALL (       2 calls)



     Electron-Phonon interpolation
     ephwann      :      1.50s CPU      3.61s WALL (       1 calls)
     ep-interp    :      0.91s CPU      0.97s WALL (     181 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.00s CPU      0.00s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.00s WALL (      81 calls)
     ep: step 2   :      1.29s CPU      3.39s WALL (       1 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (     181 calls)
     HamW2B       :      0.16s CPU      0.17s WALL (   16971 calls)
     ephW2Bp      :      0.05s CPU      0.09s WALL (     181 calls)
     ephW2B       :      0.09s CPU      0.09s WALL (    8326 calls)
     vmewan2bloch :      0.49s CPU      0.50s WALL (   16652 calls)
     vmewan2bloch :      0.49s CPU      0.50s WALL (   16652 calls)


     Total program execution
     EPW          :     17.69s CPU     20.76s WALL

     ===============================================================================
     The functionality-dependent EPW.bib file was created with suggested citations. 
     Please consider citing the papers listed in EPW.bib.                           
     ===============================================================================
                                                                                    
